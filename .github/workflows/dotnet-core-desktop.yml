# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
env:
  Solution_Name: SAS-NAS-Connector                           # Replace with your solution name, i.e. MyWpfApp.sln.
  #Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
  Project_Directory: SAS-NAS-Connector                       # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
  Project_Path: SAS-NAS-Connector\SAS-NAS-Connector.csproj   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
  SignTool_Path: C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16

    # Execute all unit tests in the solution
    #- name: Execute unit tests
    #  run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Project_Path /p:Configuration=$env:Configuration
      #/p:SignAssembly=true /p:AssemblyOriginatorKeyFile=GitHubActionsWorkflow.pfx
      #/p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env: 
        #Appx_Bundle: Always
        #Appx_Bundle_Platforms: x86|x64
        #Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    - name: Sign Assembly
      shell: cmd
      run: |
        "${{ env.SignTool_Path }}" sign /tr http://timestamp.sectigo.com /td sha256 /f ${{ env.Project_Directory }}\GitHubActionsWorkflow.pfx /p ${{ secrets.Pfx_Key }} ${{ env.Project_Directory }}\bin\${{ matrix.configuration }}\${{ env.Solution_Name }}.exe
        "${{ env.SignTool_Path }}" verify /all /pa ${{ env.Project_Directory }}\bin\${{ matrix.configuration }}\${{ env.Solution_Name }}.exe

    # Remove the pfx
    - name: Remove the pfx
      run: |
        $certificatePath = Join-Path -Path $env:Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        Remove-Item -path "$certificatePath"
    
    - name: Prepare Release Files
      run: |
        Compress-Archive -Path ${{ env.Project_Directory }}/bin/${{ matrix.configuration }}/* -DestinationPath ./${{ env.Solution_Name }}_${{ matrix.configuration }}.zip
        
    - name: Fetch Version Information
      if: ${{ matrix.configuration }} == Release
      run: |
        Select-String -Path ${{ env.Project_Path }} -Pattern "<ApplicationVersion>(\d\.\d\.\d)\..+</ApplicationVersion>" | % "{$_.matches.groups[1].value}" > ./version.txt
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      if: ${{ matrix.configuration }} == Release
      with:
        name: Version
        path: ./version.txt

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.Solution_Name }} - ${{ matrix.configuration }}
        path: ./${{ env.Solution_Name }}_${{ matrix.configuration }}.zip
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      if: ${{ matrix.configuration }} == Release
      with:
        name: Documentation
        path: ${{ env.Project_Directory }}/bin/${{ matrix.configuration }}/*.pdf

  release:
    needs: build
    runs-on: windows-latest
    steps:

    - name: Download Artifacts
      uses: actions/download-artifact@v2
    
    - name: Read VERSION file
      id: getversion
      run: |
        echo "::set-output name=version::$(cat ./Version/version.txt)"
        cat ./Version/version.txt
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.getversion.outputs.version }}.${{ github.run_id }}
        draft: true
        prerelease: false
        
    - run: |
        dir
    
    - name: Upload Release Asset
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./**/*.zip

    - name: Upload Release Asset
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./**/*.pdf

